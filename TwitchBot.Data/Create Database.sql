/*
Deployment script for Blank

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Blank"
:setvar DefaultFilePrefix "Blank"
:setvar DefaultDataPath "C:\Users\Danny\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ProjectsV12\"
:setvar DefaultLogPath "C:\Users\Danny\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ProjectsV12\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[Adjectives]...';


GO
CREATE TABLE [dbo].[Adjectives] (
    [word] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Adjectives] PRIMARY KEY CLUSTERED ([word] ASC)
);


GO
PRINT N'Creating [dbo].[Adverbs]...';


GO
CREATE TABLE [dbo].[Adverbs] (
    [word] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Adverbs] PRIMARY KEY CLUSTERED ([word] ASC)
);


GO
PRINT N'Creating [dbo].[Keywords]...';


GO
CREATE TABLE [dbo].[Keywords] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [Regex]    NVARCHAR (MAX) NOT NULL,
    [Message]  NVARCHAR (MAX) NOT NULL,
    [Username] VARCHAR (255)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Nouns]...';


GO
CREATE TABLE [dbo].[Nouns] (
    [word] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Nouns] PRIMARY KEY CLUSTERED ([word] ASC)
);


GO
PRINT N'Creating [dbo].[Streams]...';


GO
CREATE TABLE [dbo].[Streams] (
    [Id]      VARCHAR (50)  NOT NULL,
    [Channel] VARCHAR (255) NOT NULL,
    [Created] DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Verbs]...';


GO
CREATE TABLE [dbo].[Verbs] (
    [word] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Verbs] PRIMARY KEY CLUSTERED ([word] ASC)
);


GO
PRINT N'Creating [dbo].[Viewers]...';


GO
CREATE TABLE [dbo].[Viewers] (
    [Username] VARCHAR (255) NOT NULL,
    [StreamId] VARCHAR (50)  NOT NULL,
    [Joined]   DATETIME      NOT NULL,
    [LastSeen] DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Username] ASC, [StreamId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Streams]...';


GO
ALTER TABLE [dbo].[Streams]
    ADD DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating unnamed constraint on [dbo].[Viewers]...';


GO
ALTER TABLE [dbo].[Viewers]
    ADD DEFAULT (getdate()) FOR [Joined];


GO
PRINT N'Creating unnamed constraint on [dbo].[Viewers]...';


GO
ALTER TABLE [dbo].[Viewers]
    ADD DEFAULT (getdate()) FOR [LastSeen];


GO
PRINT N'Creating [dbo].[fnSplit]...';


GO

CREATE FUNCTION fnSplit (
      @Delimiter                    VARCHAR(50),
	  @InputString                  VARCHAR(max)
)

RETURNS @Items TABLE (
      Item                          VARCHAR(max)
)

AS
BEGIN
      IF @Delimiter = ' '
      BEGIN
            SET @Delimiter = ','
            SET @InputString = REPLACE(@InputString, ' ', @Delimiter)
      END

      IF (@Delimiter IS NULL OR @Delimiter = '')
            SET @Delimiter = ','

--INSERT INTO @Items VALUES (@Delimiter) -- Diagnostic
--INSERT INTO @Items VALUES (@InputString) -- Diagnostic

      DECLARE @Item                 VARCHAR(max)
      DECLARE @ItemList       VARCHAR(max)
      DECLARE @DelimIndex     INT

      SET @ItemList = @InputString
      SET @DelimIndex = CHARINDEX(@Delimiter, @ItemList, 0)
      WHILE (@DelimIndex != 0)
      BEGIN
            SET @Item = SUBSTRING(@ItemList, 0, @DelimIndex)
            INSERT INTO @Items VALUES (@Item)

            -- Set @ItemList = @ItemList minus one less item
            SET @ItemList = SUBSTRING(@ItemList, @DelimIndex+1, LEN(@ItemList)-@DelimIndex)
            SET @DelimIndex = CHARINDEX(@Delimiter, @ItemList, 0)
      END -- End WHILE

      IF @Item IS NOT NULL -- At least one delimiter was encountered in @InputString
      BEGIN
            SET @Item = @ItemList
            INSERT INTO @Items VALUES (@Item)
      END

      -- No delimiters were encountered in @InputString, so just return @InputString
      ELSE INSERT INTO @Items VALUES (@InputString)

      RETURN

END -- End Function
GO
PRINT N'Creating [dbo].[sp_Dictionary_GetRandomWords]...';


GO
CREATE PROCEDURE [dbo].[sp_Dictionary_GetRandomWords]
AS
BEGIN
	
	SELECT
		(SELECT TOP 1 word FROM Nouns ORDER BY NEWID()) Noun,
		(SELECT TOP 1 word FROM Verbs ORDER BY NEWID()) Verb,
		(SELECT TOP 1 word FROM Adjectives ORDER BY NEWID()) Adjective,
		(SELECT TOP 1 word FROM Adverbs ORDER BY NEWID()) Adverb

END
GO
PRINT N'Creating [dbo].[sp_GetUniqueViewerCount]...';


GO
CREATE PROCEDURE [dbo].[sp_GetUniqueViewerCount]
	@streamID varchar(50)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT COUNT(DISTINCT Username) [Count] FROM Viewers WHERE StreamId = @streamID;
END
GO
PRINT N'Creating [dbo].[sp_Keyword_GetAll]...';


GO

CREATE PROCEDURE [dbo].[sp_Keyword_GetAll]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT * FROM Keywords;
END
GO
PRINT N'Creating [dbo].[sp_Viewer_AddUpdate]...';


GO


CREATE PROCEDURE [dbo].[sp_Viewer_AddUpdate]
	@usernames varchar(max),
	@channel varchar(50),
	@streamID varchar(50)
AS
BEGIN
	SET NOCOUNT ON;

	IF NOT EXISTS (SELECT 1 FROM Streams WHERE Id = @streamID)
	BEGIN
		INSERT INTO Streams (Id, Channel)
		VALUES (@streamID, @channel);
	END

	MERGE Viewers v
	USING dbo.fnSplit(';', @usernames) users
	ON v.Username = users.Item AND v.streamID = @streamID
	WHEN MATCHED THEN
		UPDATE
		SET LastSeen = GETDATE()
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (Username, StreamId)
		VALUES (users.Item , @streamID);
END
GO
PRINT N'Update complete.';


GO
